/*
    BMGARCH is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMGARCH is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMGARCH.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_CCCMGARCH_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_CCCMGARCH");
    reader.add_event(148, 146, "end", "model_CCCMGARCH");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
cov2cor(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& C, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        int dm(0);
        (void) dm;  // dummy to suppress unused var warning

        stan::math::fill(dm, std::numeric_limits<int>::min());
        stan::math::assign(dm,rows(C));
        current_statement_begin__ = 5;
        validate_non_negative_index("s", "dm", dm);
        validate_non_negative_index("s", "dm", dm);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  s(static_cast<Eigen::VectorXd::Index>(dm),static_cast<Eigen::VectorXd::Index>(dm));
        (void) s;  // dummy to suppress unused var warning

        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s,DUMMY_VAR__);
        current_statement_begin__ = 6;
        validate_non_negative_index("R", "dm", dm);
        validate_non_negative_index("R", "dm", dm);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  R(static_cast<Eigen::VectorXd::Index>(dm),static_cast<Eigen::VectorXd::Index>(dm));
        (void) R;  // dummy to suppress unused var warning

        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R,DUMMY_VAR__);


        current_statement_begin__ = 7;
        stan::math::assign(s, diag_matrix(elt_divide(1.0,stan::math::sqrt(diagonal(C)))));
        current_statement_begin__ = 8;
        stan::math::assign(R, multiply(multiply(s,C),s));
        current_statement_begin__ = 9;
        return stan::math::promote_scalar<fun_return_scalar_t__>(R);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct cov2cor_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& C, std::ostream* pstream__) const {
        return cov2cor(C, pstream__);
    }
};

#include <meta_header.hpp>
 class model_CCCMGARCH : public prob_grad {
private:
    int T;
    int nt;
    vector<vector_d> rts;
    int ahead;
    matrix_d sigma1;
    vector<vector_d> rev;
public:
    model_CCCMGARCH(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_CCCMGARCH(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_CCCMGARCH_namespace::model_CCCMGARCH";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            current_statement_begin__ = 15;
            validate_non_negative_index("rts", "T", T);
            validate_non_negative_index("rts", "nt", nt);
            context__.validate_dims("data initialization", "rts", "vector_d", context__.to_vec(T,nt));
            validate_non_negative_index("rts", "T", T);
            validate_non_negative_index("rts", "nt", nt);
            rts = std::vector<vector_d>(T,vector_d(static_cast<Eigen::VectorXd::Index>(nt)));
            vals_r__ = context__.vals_r("rts");
            pos__ = 0;
            size_t rts_i_vec_lim__ = nt;
            for (size_t i_vec__ = 0; i_vec__ < rts_i_vec_lim__; ++i_vec__) {
                size_t rts_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < rts_limit_0__; ++i_0__) {
                    rts[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "ahead", "int", context__.to_vec());
            ahead = int(0);
            vals_i__ = context__.vals_i("ahead");
            pos__ = 0;
            ahead = vals_i__[pos__++];
            current_statement_begin__ = 17;
            validate_non_negative_index("sigma1", "nt", nt);
            validate_non_negative_index("sigma1", "nt", nt);
            context__.validate_dims("data initialization", "sigma1", "matrix_d", context__.to_vec(nt,nt));
            validate_non_negative_index("sigma1", "nt", nt);
            validate_non_negative_index("sigma1", "nt", nt);
            sigma1 = matrix_d(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt));
            vals_r__ = context__.vals_r("sigma1");
            pos__ = 0;
            size_t sigma1_k_mat_lim__ = nt;
            for (size_t n_mat__ = 0; n_mat__ < sigma1_k_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < sigma1_k_mat_lim__; ++m_mat__) {
                    sigma1(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 13;
            check_greater_or_equal(function__,"T",T,2);
            current_statement_begin__ = 14;
            check_greater_or_equal(function__,"nt",nt,1);
            current_statement_begin__ = 15;
            current_statement_begin__ = 16;
            check_greater_or_equal(function__,"ahead",ahead,0);
            current_statement_begin__ = 17;
            stan::math::check_cov_matrix(function__,"sigma1",sigma1);
            // initialize data variables
            current_statement_begin__ = 21;
            validate_non_negative_index("rev", "T", T);
            validate_non_negative_index("rev", "nt", nt);
            rev = std::vector<vector_d>(T,vector_d(static_cast<Eigen::VectorXd::Index>(nt)));
            stan::math::fill(rev,DUMMY_VAR__);

            current_statement_begin__ = 22;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 23;
                stan::model::assign(rev, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(((nt - i) + 1)), stan::model::nil_index_list())), "rts"), 
                            "assigning variable rev");
            }

            // validate transformed data
            current_statement_begin__ = 21;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 27;
            validate_non_negative_index("b0", "nt", nt);
            num_params_r__ += nt;
            current_statement_begin__ = 28;
            validate_non_negative_index("b1", "nt", nt);
            num_params_r__ += nt;
            current_statement_begin__ = 29;
            validate_non_negative_index("b2", "nt", nt);
            num_params_r__ += nt;
            current_statement_begin__ = 30;
            validate_non_negative_index("b3", "nt", nt);
            num_params_r__ += nt;
            current_statement_begin__ = 31;
            validate_non_negative_index("b4", "nt", nt);
            num_params_r__ += nt;
            current_statement_begin__ = 33;
            validate_non_negative_index("c_h", "nt", nt);
            num_params_r__ += nt;
            current_statement_begin__ = 34;
            validate_non_negative_index("a_h", "nt", nt);
            num_params_r__ += nt;
            current_statement_begin__ = 35;
            validate_non_negative_index("b_h", "nt", nt);
            num_params_r__ += nt;
            current_statement_begin__ = 39;
            validate_non_negative_index("R", "nt", nt);
            num_params_r__ += ((nt * (nt - 1)) / 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_CCCMGARCH() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("b0")))
            throw std::runtime_error("variable b0 missing");
        vals_r__ = context__.vals_r("b0");
        pos__ = 0U;
        validate_non_negative_index("b0", "nt", nt);
        context__.validate_dims("initialization", "b0", "vector_d", context__.to_vec(nt));
        vector_d b0(static_cast<Eigen::VectorXd::Index>(nt));
        for (int j1__ = 0U; j1__ < nt; ++j1__)
            b0(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b0: ") + e.what());
        }

        if (!(context__.contains_r("b1")))
            throw std::runtime_error("variable b1 missing");
        vals_r__ = context__.vals_r("b1");
        pos__ = 0U;
        validate_non_negative_index("b1", "nt", nt);
        context__.validate_dims("initialization", "b1", "vector_d", context__.to_vec(nt));
        vector_d b1(static_cast<Eigen::VectorXd::Index>(nt));
        for (int j1__ = 0U; j1__ < nt; ++j1__)
            b1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b1: ") + e.what());
        }

        if (!(context__.contains_r("b2")))
            throw std::runtime_error("variable b2 missing");
        vals_r__ = context__.vals_r("b2");
        pos__ = 0U;
        validate_non_negative_index("b2", "nt", nt);
        context__.validate_dims("initialization", "b2", "vector_d", context__.to_vec(nt));
        vector_d b2(static_cast<Eigen::VectorXd::Index>(nt));
        for (int j1__ = 0U; j1__ < nt; ++j1__)
            b2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b2: ") + e.what());
        }

        if (!(context__.contains_r("b3")))
            throw std::runtime_error("variable b3 missing");
        vals_r__ = context__.vals_r("b3");
        pos__ = 0U;
        validate_non_negative_index("b3", "nt", nt);
        context__.validate_dims("initialization", "b3", "vector_d", context__.to_vec(nt));
        vector_d b3(static_cast<Eigen::VectorXd::Index>(nt));
        for (int j1__ = 0U; j1__ < nt; ++j1__)
            b3(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b3: ") + e.what());
        }

        if (!(context__.contains_r("b4")))
            throw std::runtime_error("variable b4 missing");
        vals_r__ = context__.vals_r("b4");
        pos__ = 0U;
        validate_non_negative_index("b4", "nt", nt);
        context__.validate_dims("initialization", "b4", "vector_d", context__.to_vec(nt));
        vector_d b4(static_cast<Eigen::VectorXd::Index>(nt));
        for (int j1__ = 0U; j1__ < nt; ++j1__)
            b4(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b4);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b4: ") + e.what());
        }

        if (!(context__.contains_r("c_h")))
            throw std::runtime_error("variable c_h missing");
        vals_r__ = context__.vals_r("c_h");
        pos__ = 0U;
        validate_non_negative_index("c_h", "nt", nt);
        context__.validate_dims("initialization", "c_h", "vector_d", context__.to_vec(nt));
        vector_d c_h(static_cast<Eigen::VectorXd::Index>(nt));
        for (int j1__ = 0U; j1__ < nt; ++j1__)
            c_h(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,c_h);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable c_h: ") + e.what());
        }

        if (!(context__.contains_r("a_h")))
            throw std::runtime_error("variable a_h missing");
        vals_r__ = context__.vals_r("a_h");
        pos__ = 0U;
        validate_non_negative_index("a_h", "nt", nt);
        context__.validate_dims("initialization", "a_h", "vector_d", context__.to_vec(nt));
        vector_d a_h(static_cast<Eigen::VectorXd::Index>(nt));
        for (int j1__ = 0U; j1__ < nt; ++j1__)
            a_h(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,a_h);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_h: ") + e.what());
        }

        if (!(context__.contains_r("b_h")))
            throw std::runtime_error("variable b_h missing");
        vals_r__ = context__.vals_r("b_h");
        pos__ = 0U;
        validate_non_negative_index("b_h", "nt", nt);
        context__.validate_dims("initialization", "b_h", "vector_d", context__.to_vec(nt));
        vector_d b_h(static_cast<Eigen::VectorXd::Index>(nt));
        for (int j1__ = 0U; j1__ < nt; ++j1__)
            b_h(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,b_h);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b_h: ") + e.what());
        }

        if (!(context__.contains_r("R")))
            throw std::runtime_error("variable R missing");
        vals_r__ = context__.vals_r("R");
        pos__ = 0U;
        validate_non_negative_index("R", "nt", nt);
        validate_non_negative_index("R", "nt", nt);
        context__.validate_dims("initialization", "R", "matrix_d", context__.to_vec(nt,nt));
        matrix_d R(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt));
        for (int j2__ = 0U; j2__ < nt; ++j2__)
            for (int j1__ = 0U; j1__ < nt; ++j1__)
                R(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.corr_matrix_unconstrain(R);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable R: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b0;
            (void) b0;  // dummy to suppress unused var warning
            if (jacobian__)
                b0 = in__.vector_constrain(nt,lp__);
            else
                b0 = in__.vector_constrain(nt);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b1;
            (void) b1;  // dummy to suppress unused var warning
            if (jacobian__)
                b1 = in__.vector_constrain(nt,lp__);
            else
                b1 = in__.vector_constrain(nt);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b2;
            (void) b2;  // dummy to suppress unused var warning
            if (jacobian__)
                b2 = in__.vector_constrain(nt,lp__);
            else
                b2 = in__.vector_constrain(nt);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b3;
            (void) b3;  // dummy to suppress unused var warning
            if (jacobian__)
                b3 = in__.vector_constrain(nt,lp__);
            else
                b3 = in__.vector_constrain(nt);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b4;
            (void) b4;  // dummy to suppress unused var warning
            if (jacobian__)
                b4 = in__.vector_constrain(nt,lp__);
            else
                b4 = in__.vector_constrain(nt);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  c_h;
            (void) c_h;  // dummy to suppress unused var warning
            if (jacobian__)
                c_h = in__.vector_lb_constrain(0,nt,lp__);
            else
                c_h = in__.vector_lb_constrain(0,nt);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a_h;
            (void) a_h;  // dummy to suppress unused var warning
            if (jacobian__)
                a_h = in__.vector_lb_constrain(0,nt,lp__);
            else
                a_h = in__.vector_lb_constrain(0,nt);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b_h;
            (void) b_h;  // dummy to suppress unused var warning
            if (jacobian__)
                b_h = in__.vector_lb_constrain(0,nt,lp__);
            else
                b_h = in__.vector_lb_constrain(0,nt);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  R;
            (void) R;  // dummy to suppress unused var warning
            if (jacobian__)
                R = in__.corr_matrix_constrain(nt,lp__);
            else
                R = in__.corr_matrix_constrain(nt);


            // transformed parameters
            current_statement_begin__ = 43;
            validate_non_negative_index("H", "nt", nt);
            validate_non_negative_index("H", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > H(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(H, DUMMY_VAR__);
            stan::math::fill(H,DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("rr", "nt", nt);
            validate_non_negative_index("rr", "(T - 1)", (T - 1));
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > rr((T - 1), (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(rr, DUMMY_VAR__);
            stan::math::fill(rr,DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("mu", "nt", nt);
            validate_non_negative_index("mu", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > mu(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu,DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("D", "nt", nt);
            validate_non_negative_index("D", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > D(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(D, DUMMY_VAR__);
            stan::math::fill(D,DUMMY_VAR__);


            current_statement_begin__ = 52;
            stan::model::assign(mu, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        add(add(add(add(b0,elt_multiply(b1,subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),b0))),elt_multiply(b2,subtract(stan::model::rvalue(rev, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rev"),subtract(sum(b0),b0)))),elt_multiply(b3,stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"))),elt_multiply(b4,stan::model::rvalue(rev, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rev"))), 
                        "assigning variable mu");
            current_statement_begin__ = 54;
            stan::model::assign(D, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        diagonal(sigma1), 
                        "assigning variable D");
            current_statement_begin__ = 55;
            stan::model::assign(H, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        quad_form_diag(R,stan::model::rvalue(D, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "D")), 
                        "assigning variable H");
            current_statement_begin__ = 62;
            for (int t = 2; t <= T; ++t) {

                current_statement_begin__ = 63;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            stan::model::deep_copy(add(add(add(add(b0,elt_multiply(b1,subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")))),elt_multiply(b2,subtract(stan::model::rvalue(rev, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rev"),subtract(sum(stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"))))),elt_multiply(b3,stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"))),elt_multiply(b4,stan::model::rvalue(rev, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rev")))), 
                            "assigning variable mu");
                current_statement_begin__ = 64;
                for (int d = 1; d <= nt; ++d) {

                    current_statement_begin__ = 65;
                    stan::model::assign(rr, 
                                stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_uni(d), stan::model::nil_index_list())), 
                                square((get_base1(get_base1(rts,(t - 1),"rts",1),d,"rts",2) - get_base1(get_base1(mu,(t - 1),"mu",1),d,"mu",2))), 
                                "assigning variable rr");
                    current_statement_begin__ = 66;
                    stan::model::assign(D, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(d), stan::model::nil_index_list())), 
                                stan::model::deep_copy(stan::math::sqrt(((get_base1(c_h,d,"c_h",1) + (get_base1(a_h,d,"a_h",1) * get_base1(get_base1(rr,(t - 1),"rr",1),d,"rr",2))) + (get_base1(b_h,d,"b_h",1) * get_base1(get_base1(D,(t - 1),"D",1),d,"D",2))))), 
                                "assigning variable D");
                }
                current_statement_begin__ = 73;
                stan::model::assign(H, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            quad_form_diag(R,stan::model::rvalue(D, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "D")), 
                            "assigning variable H");
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < T; ++i0__) {
                for (int i1__ = 0; i1__ < nt; ++i1__) {
                    for (int i2__ = 0; i2__ < nt; ++i2__) {
                        if (stan::math::is_uninitialized(H[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: H" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < (T - 1); ++i0__) {
                for (int i1__ = 0; i1__ < nt; ++i1__) {
                    if (stan::math::is_uninitialized(rr[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: rr" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < T; ++i0__) {
                for (int i1__ = 0; i1__ < nt; ++i1__) {
                    if (stan::math::is_uninitialized(mu[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mu" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < T; ++i0__) {
                for (int i1__ = 0; i1__ < nt; ++i1__) {
                    if (stan::math::is_uninitialized(D[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: D" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 43;
            for (int k0__ = 0; k0__ < T; ++k0__) {
                stan::math::check_cov_matrix(function__,"H[k0__]",H[k0__]);
            }
            current_statement_begin__ = 45;
            current_statement_begin__ = 46;
            current_statement_begin__ = 47;

            // model body

            current_statement_begin__ = 79;
            lp_accum__.add(normal_log<propto__>(to_vector(b4), 0, 1));
            current_statement_begin__ = 80;
            lp_accum__.add(normal_log<propto__>(to_vector(b3), 0, 1));
            current_statement_begin__ = 81;
            lp_accum__.add(normal_log<propto__>(to_vector(b2), 0, 1));
            current_statement_begin__ = 82;
            lp_accum__.add(normal_log<propto__>(to_vector(b1), 0, 1));
            current_statement_begin__ = 83;
            lp_accum__.add(normal_log<propto__>(to_vector(b0), 0, 1));
            current_statement_begin__ = 84;
            lp_accum__.add(normal_log<propto__>(to_vector(a_h), 0, 0.5));
            current_statement_begin__ = 85;
            lp_accum__.add(normal_log<propto__>(to_vector(b_h), 0, 0.5));
            current_statement_begin__ = 86;
            lp_accum__.add(lkj_corr_log<propto__>(R, nt));
            current_statement_begin__ = 88;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 89;
                lp_accum__.add(multi_normal_log<propto__>(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"), stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"), stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H")));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("b0");
        names__.push_back("b1");
        names__.push_back("b2");
        names__.push_back("b3");
        names__.push_back("b4");
        names__.push_back("c_h");
        names__.push_back("a_h");
        names__.push_back("b_h");
        names__.push_back("R");
        names__.push_back("H");
        names__.push_back("rr");
        names__.push_back("mu");
        names__.push_back("D");
        names__.push_back("rts_out");
        names__.push_back("log_lik");
        names__.push_back("corH");
        names__.push_back("rts_p");
        names__.push_back("mu_p");
        names__.push_back("rr_p");
        names__.push_back("D_p");
        names__.push_back("H_p");
        names__.push_back("rev_p");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((T - 1));
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ahead);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ahead);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ahead);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ahead);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ahead);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_CCCMGARCH_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d b0 = in__.vector_constrain(nt);
        vector_d b1 = in__.vector_constrain(nt);
        vector_d b2 = in__.vector_constrain(nt);
        vector_d b3 = in__.vector_constrain(nt);
        vector_d b4 = in__.vector_constrain(nt);
        vector_d c_h = in__.vector_lb_constrain(0,nt);
        vector_d a_h = in__.vector_lb_constrain(0,nt);
        vector_d b_h = in__.vector_lb_constrain(0,nt);
        matrix_d R = in__.corr_matrix_constrain(nt);
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(b0[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(b1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(b2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(b3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(b4[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(c_h[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(a_h[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(b_h[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(R(k_0__, k_1__));
                }
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 43;
            validate_non_negative_index("H", "nt", nt);
            validate_non_negative_index("H", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > H(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(H, DUMMY_VAR__);
            stan::math::fill(H,DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("rr", "nt", nt);
            validate_non_negative_index("rr", "(T - 1)", (T - 1));
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > rr((T - 1), (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(rr, DUMMY_VAR__);
            stan::math::fill(rr,DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("mu", "nt", nt);
            validate_non_negative_index("mu", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > mu(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu,DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("D", "nt", nt);
            validate_non_negative_index("D", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > D(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(D, DUMMY_VAR__);
            stan::math::fill(D,DUMMY_VAR__);


            current_statement_begin__ = 52;
            stan::model::assign(mu, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        add(add(add(add(b0,elt_multiply(b1,subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),b0))),elt_multiply(b2,subtract(stan::model::rvalue(rev, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rev"),subtract(sum(b0),b0)))),elt_multiply(b3,stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"))),elt_multiply(b4,stan::model::rvalue(rev, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rev"))), 
                        "assigning variable mu");
            current_statement_begin__ = 54;
            stan::model::assign(D, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        diagonal(sigma1), 
                        "assigning variable D");
            current_statement_begin__ = 55;
            stan::model::assign(H, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        quad_form_diag(R,stan::model::rvalue(D, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "D")), 
                        "assigning variable H");
            current_statement_begin__ = 62;
            for (int t = 2; t <= T; ++t) {

                current_statement_begin__ = 63;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            stan::model::deep_copy(add(add(add(add(b0,elt_multiply(b1,subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")))),elt_multiply(b2,subtract(stan::model::rvalue(rev, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rev"),subtract(sum(stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"))))),elt_multiply(b3,stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"))),elt_multiply(b4,stan::model::rvalue(rev, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rev")))), 
                            "assigning variable mu");
                current_statement_begin__ = 64;
                for (int d = 1; d <= nt; ++d) {

                    current_statement_begin__ = 65;
                    stan::model::assign(rr, 
                                stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_uni(d), stan::model::nil_index_list())), 
                                square((get_base1(get_base1(rts,(t - 1),"rts",1),d,"rts",2) - get_base1(get_base1(mu,(t - 1),"mu",1),d,"mu",2))), 
                                "assigning variable rr");
                    current_statement_begin__ = 66;
                    stan::model::assign(D, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(d), stan::model::nil_index_list())), 
                                stan::model::deep_copy(stan::math::sqrt(((get_base1(c_h,d,"c_h",1) + (get_base1(a_h,d,"a_h",1) * get_base1(get_base1(rr,(t - 1),"rr",1),d,"rr",2))) + (get_base1(b_h,d,"b_h",1) * get_base1(get_base1(D,(t - 1),"D",1),d,"D",2))))), 
                                "assigning variable D");
                }
                current_statement_begin__ = 73;
                stan::model::assign(H, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            quad_form_diag(R,stan::model::rvalue(D, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "D")), 
                            "assigning variable H");
            }

            // validate transformed parameters
            current_statement_begin__ = 43;
            for (int k0__ = 0; k0__ < T; ++k0__) {
                stan::math::check_cov_matrix(function__,"H[k0__]",H[k0__]);
            }
            current_statement_begin__ = 45;
            current_statement_begin__ = 46;
            current_statement_begin__ = 47;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_2__ = 0; k_2__ < nt; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(H[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (T - 1); ++k_0__) {
                vars__.push_back(rr[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(mu[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(D[k_0__][k_1__]);
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 93;
            validate_non_negative_index("rts_out", "nt", nt);
            validate_non_negative_index("rts_out", "T", T);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  rts_out(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(T));
            (void) rts_out;  // dummy to suppress unused var warning

            stan::math::initialize(rts_out, DUMMY_VAR__);
            stan::math::fill(rts_out,DUMMY_VAR__);
            current_statement_begin__ = 94;
            validate_non_negative_index("log_lik", "T", T);
            vector<local_scalar_t__> log_lik(T);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik,DUMMY_VAR__);
            current_statement_begin__ = 95;
            validate_non_negative_index("corH", "nt", nt);
            validate_non_negative_index("corH", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > corH(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(corH, DUMMY_VAR__);
            stan::math::fill(corH,DUMMY_VAR__);
            current_statement_begin__ = 97;
            validate_non_negative_index("rts_p", "nt", nt);
            validate_non_negative_index("rts_p", "ahead", ahead);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > rts_p(ahead, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(rts_p, DUMMY_VAR__);
            stan::math::fill(rts_p,DUMMY_VAR__);
            current_statement_begin__ = 98;
            validate_non_negative_index("mu_p", "nt", nt);
            validate_non_negative_index("mu_p", "ahead", ahead);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > mu_p(ahead, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(mu_p, DUMMY_VAR__);
            stan::math::fill(mu_p,DUMMY_VAR__);
            current_statement_begin__ = 99;
            validate_non_negative_index("rr_p", "nt", nt);
            validate_non_negative_index("rr_p", "ahead", ahead);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > rr_p(ahead, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(rr_p, DUMMY_VAR__);
            stan::math::fill(rr_p,DUMMY_VAR__);
            current_statement_begin__ = 100;
            validate_non_negative_index("D_p", "nt", nt);
            validate_non_negative_index("D_p", "ahead", ahead);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > D_p(ahead, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(D_p, DUMMY_VAR__);
            stan::math::fill(D_p,DUMMY_VAR__);
            current_statement_begin__ = 101;
            validate_non_negative_index("H_p", "nt", nt);
            validate_non_negative_index("H_p", "ahead", ahead);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > H_p(ahead, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(H_p, DUMMY_VAR__);
            stan::math::fill(H_p,DUMMY_VAR__);
            current_statement_begin__ = 103;
            validate_non_negative_index("rev_p", "2", 2);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rev_p(static_cast<Eigen::VectorXd::Index>(2));
            (void) rev_p;  // dummy to suppress unused var warning

            stan::math::initialize(rev_p, DUMMY_VAR__);
            stan::math::fill(rev_p,DUMMY_VAR__);
            stan::math::assign(rev_p,transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(0).add(0).array())));


            current_statement_begin__ = 109;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 110;
                stan::model::assign(rts_out, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            multi_normal_rng(stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"),stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H"), base_rng__), 
                            "assigning variable rts_out");
                current_statement_begin__ = 111;
                stan::model::assign(corH, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            cov2cor(stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H"), pstream__), 
                            "assigning variable corH");
                current_statement_begin__ = 112;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            multi_normal_log(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"),stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H")), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 115;
            stan::model::assign(mu_p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        add(add(add(add(b0,elt_multiply(b1,subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")))),elt_multiply(b2,subtract(stan::model::rvalue(rev, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rev"),subtract(sum(stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"))))),elt_multiply(b3,stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"))),elt_multiply(b4,stan::model::rvalue(rev, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rev"))), 
                        "assigning variable mu_p");
            current_statement_begin__ = 116;
            for (int d = 1; d <= nt; ++d) {

                current_statement_begin__ = 117;
                stan::model::assign(rr_p, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(d), stan::model::nil_index_list())), 
                            square((get_base1(get_base1(rts,T,"rts",1),d,"rts",2) - get_base1(get_base1(mu,T,"mu",1),d,"mu",2))), 
                            "assigning variable rr_p");
                current_statement_begin__ = 118;
                stan::model::assign(D_p, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(d), stan::model::nil_index_list())), 
                            stan::math::sqrt(((get_base1(c_h,d,"c_h",1) + (get_base1(a_h,d,"a_h",1) * get_base1(get_base1(rr_p,1,"rr_p",1),d,"rr_p",2))) + (get_base1(b_h,d,"b_h",1) * get_base1(get_base1(D,T,"D",1),d,"D",2)))), 
                            "assigning variable D_p");
            }
            current_statement_begin__ = 124;
            stan::model::assign(H_p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        quad_form_diag(R,get_base1(D_p,1,"D_p",1)), 
                        "assigning variable H_p");
            current_statement_begin__ = 126;
            stan::model::assign(rts_p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        multi_normal_rng(stan::model::rvalue(mu_p, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu_p"),stan::model::rvalue(H_p, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H_p"), base_rng__), 
                        "assigning variable rts_p");
            current_statement_begin__ = 128;
            if (as_bool(logical_gte(ahead,2))) {

                current_statement_begin__ = 129;
                for (int p = 2; p <= ahead; ++p) {

                    current_statement_begin__ = 130;
                    stan::model::assign(rev_p, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                                get_base1(get_base1(rts_p,(p - 1),"rts_p",1),1,"rts_p",2), 
                                "assigning variable rev_p");
                    current_statement_begin__ = 131;
                    stan::model::assign(rev_p, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                get_base1(get_base1(rts_p,(p - 1),"rts_p",1),2,"rts_p",2), 
                                "assigning variable rev_p");
                    current_statement_begin__ = 132;
                    stan::model::assign(mu_p, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                stan::model::deep_copy(add(add(add(add(b0,elt_multiply(b1,subtract(stan::model::rvalue(rts_p, stan::model::cons_list(stan::model::index_uni((p - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts_p"),get_base1(mu_p,(p - 1),"mu_p",1)))),elt_multiply(b2,subtract(rev_p,subtract(sum(rev_p),stan::model::rvalue(mu_p, stan::model::cons_list(stan::model::index_uni((p - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu_p"))))),elt_multiply(b3,stan::model::rvalue(rts_p, stan::model::cons_list(stan::model::index_uni((p - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts_p"))),elt_multiply(b4,rev_p))), 
                                "assigning variable mu_p");
                    current_statement_begin__ = 133;
                    for (int d = 1; d <= nt; ++d) {

                        current_statement_begin__ = 134;
                        stan::model::assign(rr_p, 
                                    stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(d), stan::model::nil_index_list())), 
                                    square((get_base1(get_base1(rts_p,(p - 1),"rts_p",1),d,"rts_p",2) - get_base1(get_base1(mu_p,(p - 1),"mu_p",1),d,"mu_p",2))), 
                                    "assigning variable rr_p");
                        current_statement_begin__ = 135;
                        stan::model::assign(D_p, 
                                    stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(d), stan::model::nil_index_list())), 
                                    stan::model::deep_copy(stan::math::sqrt(((get_base1(c_h,d,"c_h",1) + (get_base1(a_h,d,"a_h",1) * get_base1(get_base1(rr_p,(p - 1),"rr_p",1),d,"rr_p",2))) + (get_base1(b_h,d,"b_h",1) * get_base1(get_base1(D_p,(p - 1),"D_p",1),d,"D_p",2))))), 
                                    "assigning variable D_p");
                    }
                    current_statement_begin__ = 141;
                    stan::model::assign(H_p, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                quad_form_diag(R,get_base1(D_p,p,"D_p",1)), 
                                "assigning variable H_p");
                    current_statement_begin__ = 143;
                    stan::model::assign(rts_p, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                multi_normal_rng(stan::model::rvalue(mu_p, stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu_p"),stan::model::rvalue(H_p, stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H_p"), base_rng__), 
                                "assigning variable rts_p");
                }
            }

            // validate generated quantities
            current_statement_begin__ = 93;
            current_statement_begin__ = 94;
            current_statement_begin__ = 95;
            for (int k0__ = 0; k0__ < T; ++k0__) {
                stan::math::check_corr_matrix(function__,"corH[k0__]",corH[k0__]);
            }
            current_statement_begin__ = 97;
            current_statement_begin__ = 98;
            current_statement_begin__ = 99;
            current_statement_begin__ = 100;
            current_statement_begin__ = 101;
            for (int k0__ = 0; k0__ < ahead; ++k0__) {
                stan::math::check_cov_matrix(function__,"H_p[k0__]",H_p[k0__]);
            }
            current_statement_begin__ = 103;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < T; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(rts_out(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
            }
            for (int k_2__ = 0; k_2__ < nt; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(corH[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < ahead; ++k_0__) {
                vars__.push_back(rts_p[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < ahead; ++k_0__) {
                vars__.push_back(mu_p[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < ahead; ++k_0__) {
                vars__.push_back(rr_p[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < ahead; ++k_0__) {
                vars__.push_back(D_p[k_0__][k_1__]);
                }
            }
            for (int k_2__ = 0; k_2__ < nt; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < ahead; ++k_0__) {
                    vars__.push_back(H_p[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
            vars__.push_back(rev_p[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_CCCMGARCH";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b4" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c_h" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_h" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_h" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_2__ = 1; k_2__ <= nt; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "H" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= (T - 1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "rr" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "D" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rts_out" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_2__ = 1; k_2__ <= nt; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "corH" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rts_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rr_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "D_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= nt; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "H_p" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rev_p" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b4" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c_h" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_h" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_h" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((nt * (nt - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= (nt + ((nt * (nt - 1)) / 2)); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "H" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= (T - 1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "rr" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "D" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rts_out" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= ((nt * (nt - 1)) / 2); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corH" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rts_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rr_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "D_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (nt + ((nt * (nt - 1)) / 2)); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "H_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rev_p" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_CCCMGARCH_namespace::model_CCCMGARCH stan_model;


#endif
