/*
    BMGARCH is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMGARCH is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMGARCH.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_BEKKMGARCH_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_BEKKMGARCH");
    reader.add_event(138, 136, "end", "model_BEKKMGARCH");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
cov2cor(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& C, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        int dm(0);
        (void) dm;  // dummy to suppress unused var warning

        stan::math::fill(dm, std::numeric_limits<int>::min());
        stan::math::assign(dm,rows(C));
        current_statement_begin__ = 5;
        validate_non_negative_index("s", "dm", dm);
        validate_non_negative_index("s", "dm", dm);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  s(static_cast<Eigen::VectorXd::Index>(dm),static_cast<Eigen::VectorXd::Index>(dm));
        (void) s;  // dummy to suppress unused var warning

        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s,DUMMY_VAR__);
        current_statement_begin__ = 6;
        validate_non_negative_index("R", "dm", dm);
        validate_non_negative_index("R", "dm", dm);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  R(static_cast<Eigen::VectorXd::Index>(dm),static_cast<Eigen::VectorXd::Index>(dm));
        (void) R;  // dummy to suppress unused var warning

        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R,DUMMY_VAR__);


        current_statement_begin__ = 7;
        stan::math::assign(s, diag_matrix(elt_divide(1.0,stan::math::sqrt(diagonal(C)))));
        current_statement_begin__ = 8;
        stan::math::assign(R, multiply(multiply(s,C),s));
        current_statement_begin__ = 9;
        return stan::math::promote_scalar<fun_return_scalar_t__>(R);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct cov2cor_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& C, std::ostream* pstream__) const {
        return cov2cor(C, pstream__);
    }
};

#include <meta_header.hpp>
 class model_BEKKMGARCH : public prob_grad {
private:
    int T;
    int nt;
    vector<vector_d> rts;
    int ahead;
    matrix_d sigma1;
    vector<vector_d> rev;
public:
    model_BEKKMGARCH(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_BEKKMGARCH(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_BEKKMGARCH_namespace::model_BEKKMGARCH";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            current_statement_begin__ = 15;
            validate_non_negative_index("rts", "T", T);
            validate_non_negative_index("rts", "nt", nt);
            context__.validate_dims("data initialization", "rts", "vector_d", context__.to_vec(T,nt));
            validate_non_negative_index("rts", "T", T);
            validate_non_negative_index("rts", "nt", nt);
            rts = std::vector<vector_d>(T,vector_d(static_cast<Eigen::VectorXd::Index>(nt)));
            vals_r__ = context__.vals_r("rts");
            pos__ = 0;
            size_t rts_i_vec_lim__ = nt;
            for (size_t i_vec__ = 0; i_vec__ < rts_i_vec_lim__; ++i_vec__) {
                size_t rts_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < rts_limit_0__; ++i_0__) {
                    rts[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "ahead", "int", context__.to_vec());
            ahead = int(0);
            vals_i__ = context__.vals_i("ahead");
            pos__ = 0;
            ahead = vals_i__[pos__++];
            current_statement_begin__ = 17;
            validate_non_negative_index("sigma1", "nt", nt);
            validate_non_negative_index("sigma1", "nt", nt);
            context__.validate_dims("data initialization", "sigma1", "matrix_d", context__.to_vec(nt,nt));
            validate_non_negative_index("sigma1", "nt", nt);
            validate_non_negative_index("sigma1", "nt", nt);
            sigma1 = matrix_d(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt));
            vals_r__ = context__.vals_r("sigma1");
            pos__ = 0;
            size_t sigma1_m_mat_lim__ = nt;
            size_t sigma1_n_mat_lim__ = nt;
            for (size_t n_mat__ = 0; n_mat__ < sigma1_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < sigma1_m_mat_lim__; ++m_mat__) {
                    sigma1(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 13;
            check_greater_or_equal(function__,"T",T,2);
            current_statement_begin__ = 14;
            check_greater_or_equal(function__,"nt",nt,1);
            current_statement_begin__ = 15;
            current_statement_begin__ = 16;
            check_greater_or_equal(function__,"ahead",ahead,0);
            current_statement_begin__ = 17;
            // initialize data variables
            current_statement_begin__ = 21;
            validate_non_negative_index("rev", "T", T);
            validate_non_negative_index("rev", "nt", nt);
            rev = std::vector<vector_d>(T,vector_d(static_cast<Eigen::VectorXd::Index>(nt)));
            stan::math::fill(rev,DUMMY_VAR__);

            current_statement_begin__ = 22;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 23;
                stan::model::assign(rev, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(((nt - i) + 1)), stan::model::nil_index_list())), "rts"), 
                            "assigning variable rev");
            }

            // validate transformed data
            current_statement_begin__ = 21;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 28;
            validate_non_negative_index("Cnst", "nt", nt);
            num_params_r__ += ((nt * (nt - 1)) / 2 + nt);
            current_statement_begin__ = 30;
            ++num_params_r__;
            current_statement_begin__ = 31;
        validate_non_negative_index("Ap1k", "(nt - 2)", (nt - 2));
            num_params_r__ += (nt - 2);
            current_statement_begin__ = 32;
        validate_non_negative_index("Ap_sub", "(nt - 1)", (nt - 1));
            validate_non_negative_index("Ap_sub", "(nt - 1)", (nt - 1));
            num_params_r__ += (nt - 1) * (nt - 1);
            current_statement_begin__ = 34;
            ++num_params_r__;
            current_statement_begin__ = 35;
        validate_non_negative_index("Bp1k", "(nt - 2)", (nt - 2));
            num_params_r__ += (nt - 2);
            current_statement_begin__ = 36;
        validate_non_negative_index("Bp_sub", "(nt - 1)", (nt - 1));
            validate_non_negative_index("Bp_sub", "(nt - 1)", (nt - 1));
            num_params_r__ += (nt - 1) * (nt - 1);
            current_statement_begin__ = 38;
            validate_non_negative_index("A_log", "nt", nt);
            num_params_r__ += nt;
            current_statement_begin__ = 39;
            validate_non_negative_index("B_log", "nt", nt);
            num_params_r__ += nt;
            current_statement_begin__ = 41;
            validate_non_negative_index("phi0", "nt", nt);
            num_params_r__ += nt;
            current_statement_begin__ = 42;
        validate_non_negative_index("phi", "nt", nt);
            validate_non_negative_index("phi", "nt", nt);
            num_params_r__ += nt * nt;
            current_statement_begin__ = 43;
        validate_non_negative_index("theta", "nt", nt);
            validate_non_negative_index("theta", "nt", nt);
            num_params_r__ += nt * nt;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_BEKKMGARCH() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("Cnst")))
            throw std::runtime_error("variable Cnst missing");
        vals_r__ = context__.vals_r("Cnst");
        pos__ = 0U;
        validate_non_negative_index("Cnst", "nt", nt);
        validate_non_negative_index("Cnst", "nt", nt);
        context__.validate_dims("initialization", "Cnst", "matrix_d", context__.to_vec(nt,nt));
        matrix_d Cnst(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt));
        for (int j2__ = 0U; j2__ < nt; ++j2__)
            for (int j1__ = 0U; j1__ < nt; ++j1__)
                Cnst(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cov_matrix_unconstrain(Cnst);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Cnst: ") + e.what());
        }

        if (!(context__.contains_r("Ap11")))
            throw std::runtime_error("variable Ap11 missing");
        vals_r__ = context__.vals_r("Ap11");
        pos__ = 0U;
        context__.validate_dims("initialization", "Ap11", "double", context__.to_vec());
        double Ap11(0);
        Ap11 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,1,Ap11);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Ap11: ") + e.what());
        }

        if (!(context__.contains_r("Ap1k")))
            throw std::runtime_error("variable Ap1k missing");
        vals_r__ = context__.vals_r("Ap1k");
        pos__ = 0U;
        validate_non_negative_index("Ap1k", "(nt - 2)", (nt - 2));
        context__.validate_dims("initialization", "Ap1k", "row_vector_d", context__.to_vec((nt - 2)));
        row_vector_d Ap1k(static_cast<Eigen::VectorXd::Index>((nt - 2)));
        for (int j1__ = 0U; j1__ < (nt - 2); ++j1__)
            Ap1k(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(Ap1k);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Ap1k: ") + e.what());
        }

        if (!(context__.contains_r("Ap_sub")))
            throw std::runtime_error("variable Ap_sub missing");
        vals_r__ = context__.vals_r("Ap_sub");
        pos__ = 0U;
        validate_non_negative_index("Ap_sub", "(nt - 1)", (nt - 1));
        validate_non_negative_index("Ap_sub", "(nt - 1)", (nt - 1));
        context__.validate_dims("initialization", "Ap_sub", "matrix_d", context__.to_vec((nt - 1),(nt - 1)));
        matrix_d Ap_sub(static_cast<Eigen::VectorXd::Index>((nt - 1)),static_cast<Eigen::VectorXd::Index>((nt - 1)));
        for (int j2__ = 0U; j2__ < (nt - 1); ++j2__)
            for (int j1__ = 0U; j1__ < (nt - 1); ++j1__)
                Ap_sub(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(Ap_sub);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Ap_sub: ") + e.what());
        }

        if (!(context__.contains_r("Bp11")))
            throw std::runtime_error("variable Bp11 missing");
        vals_r__ = context__.vals_r("Bp11");
        pos__ = 0U;
        context__.validate_dims("initialization", "Bp11", "double", context__.to_vec());
        double Bp11(0);
        Bp11 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,1,Bp11);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Bp11: ") + e.what());
        }

        if (!(context__.contains_r("Bp1k")))
            throw std::runtime_error("variable Bp1k missing");
        vals_r__ = context__.vals_r("Bp1k");
        pos__ = 0U;
        validate_non_negative_index("Bp1k", "(nt - 2)", (nt - 2));
        context__.validate_dims("initialization", "Bp1k", "row_vector_d", context__.to_vec((nt - 2)));
        row_vector_d Bp1k(static_cast<Eigen::VectorXd::Index>((nt - 2)));
        for (int j1__ = 0U; j1__ < (nt - 2); ++j1__)
            Bp1k(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(Bp1k);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Bp1k: ") + e.what());
        }

        if (!(context__.contains_r("Bp_sub")))
            throw std::runtime_error("variable Bp_sub missing");
        vals_r__ = context__.vals_r("Bp_sub");
        pos__ = 0U;
        validate_non_negative_index("Bp_sub", "(nt - 1)", (nt - 1));
        validate_non_negative_index("Bp_sub", "(nt - 1)", (nt - 1));
        context__.validate_dims("initialization", "Bp_sub", "matrix_d", context__.to_vec((nt - 1),(nt - 1)));
        matrix_d Bp_sub(static_cast<Eigen::VectorXd::Index>((nt - 1)),static_cast<Eigen::VectorXd::Index>((nt - 1)));
        for (int j2__ = 0U; j2__ < (nt - 1); ++j2__)
            for (int j1__ = 0U; j1__ < (nt - 1); ++j1__)
                Bp_sub(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(Bp_sub);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Bp_sub: ") + e.what());
        }

        if (!(context__.contains_r("A_log")))
            throw std::runtime_error("variable A_log missing");
        vals_r__ = context__.vals_r("A_log");
        pos__ = 0U;
        validate_non_negative_index("A_log", "nt", nt);
        context__.validate_dims("initialization", "A_log", "vector_d", context__.to_vec(nt));
        vector_d A_log(static_cast<Eigen::VectorXd::Index>(nt));
        for (int j1__ = 0U; j1__ < nt; ++j1__)
            A_log(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(A_log);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable A_log: ") + e.what());
        }

        if (!(context__.contains_r("B_log")))
            throw std::runtime_error("variable B_log missing");
        vals_r__ = context__.vals_r("B_log");
        pos__ = 0U;
        validate_non_negative_index("B_log", "nt", nt);
        context__.validate_dims("initialization", "B_log", "vector_d", context__.to_vec(nt));
        vector_d B_log(static_cast<Eigen::VectorXd::Index>(nt));
        for (int j1__ = 0U; j1__ < nt; ++j1__)
            B_log(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(B_log);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable B_log: ") + e.what());
        }

        if (!(context__.contains_r("phi0")))
            throw std::runtime_error("variable phi0 missing");
        vals_r__ = context__.vals_r("phi0");
        pos__ = 0U;
        validate_non_negative_index("phi0", "nt", nt);
        context__.validate_dims("initialization", "phi0", "vector_d", context__.to_vec(nt));
        vector_d phi0(static_cast<Eigen::VectorXd::Index>(nt));
        for (int j1__ = 0U; j1__ < nt; ++j1__)
            phi0(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(phi0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable phi0: ") + e.what());
        }

        if (!(context__.contains_r("phi")))
            throw std::runtime_error("variable phi missing");
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "nt", nt);
        validate_non_negative_index("phi", "nt", nt);
        context__.validate_dims("initialization", "phi", "matrix_d", context__.to_vec(nt,nt));
        matrix_d phi(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt));
        for (int j2__ = 0U; j2__ < nt; ++j2__)
            for (int j1__ = 0U; j1__ < nt; ++j1__)
                phi(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(phi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable phi: ") + e.what());
        }

        if (!(context__.contains_r("theta")))
            throw std::runtime_error("variable theta missing");
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "nt", nt);
        validate_non_negative_index("theta", "nt", nt);
        context__.validate_dims("initialization", "theta", "matrix_d", context__.to_vec(nt,nt));
        matrix_d theta(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt));
        for (int j2__ = 0U; j2__ < nt; ++j2__)
            for (int j1__ = 0U; j1__ < nt; ++j1__)
                theta(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Cnst;
            (void) Cnst;  // dummy to suppress unused var warning
            if (jacobian__)
                Cnst = in__.cov_matrix_constrain(nt,lp__);
            else
                Cnst = in__.cov_matrix_constrain(nt);

            local_scalar_t__ Ap11;
            (void) Ap11;  // dummy to suppress unused var warning
            if (jacobian__)
                Ap11 = in__.scalar_lub_constrain(0,1,lp__);
            else
                Ap11 = in__.scalar_lub_constrain(0,1);

            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  Ap1k;
            (void) Ap1k;  // dummy to suppress unused var warning
            if (jacobian__)
                Ap1k = in__.row_vector_constrain((nt - 2),lp__);
            else
                Ap1k = in__.row_vector_constrain((nt - 2));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Ap_sub;
            (void) Ap_sub;  // dummy to suppress unused var warning
            if (jacobian__)
                Ap_sub = in__.matrix_constrain((nt - 1),(nt - 1),lp__);
            else
                Ap_sub = in__.matrix_constrain((nt - 1),(nt - 1));

            local_scalar_t__ Bp11;
            (void) Bp11;  // dummy to suppress unused var warning
            if (jacobian__)
                Bp11 = in__.scalar_lub_constrain(0,1,lp__);
            else
                Bp11 = in__.scalar_lub_constrain(0,1);

            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  Bp1k;
            (void) Bp1k;  // dummy to suppress unused var warning
            if (jacobian__)
                Bp1k = in__.row_vector_constrain((nt - 2),lp__);
            else
                Bp1k = in__.row_vector_constrain((nt - 2));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Bp_sub;
            (void) Bp_sub;  // dummy to suppress unused var warning
            if (jacobian__)
                Bp_sub = in__.matrix_constrain((nt - 1),(nt - 1),lp__);
            else
                Bp_sub = in__.matrix_constrain((nt - 1),(nt - 1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  A_log;
            (void) A_log;  // dummy to suppress unused var warning
            if (jacobian__)
                A_log = in__.vector_constrain(nt,lp__);
            else
                A_log = in__.vector_constrain(nt);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  B_log;
            (void) B_log;  // dummy to suppress unused var warning
            if (jacobian__)
                B_log = in__.vector_constrain(nt,lp__);
            else
                B_log = in__.vector_constrain(nt);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  phi0;
            (void) phi0;  // dummy to suppress unused var warning
            if (jacobian__)
                phi0 = in__.vector_constrain(nt,lp__);
            else
                phi0 = in__.vector_constrain(nt);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.matrix_constrain(nt,nt,lp__);
            else
                phi = in__.matrix_constrain(nt,nt);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.matrix_constrain(nt,nt,lp__);
            else
                theta = in__.matrix_constrain(nt,nt);


            // transformed parameters
            current_statement_begin__ = 46;
            validate_non_negative_index("L_H", "nt", nt);
            validate_non_negative_index("L_H", "nt", nt);
            validate_non_negative_index("L_H", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > L_H(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(L_H, DUMMY_VAR__);
            stan::math::fill(L_H,DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("H", "nt", nt);
            validate_non_negative_index("H", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > H(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(H, DUMMY_VAR__);
            stan::math::fill(H,DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("rr", "nt", nt);
            validate_non_negative_index("rr", "nt", nt);
            validate_non_negative_index("rr", "(T - 1)", (T - 1));
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > rr((T - 1), (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(rr, DUMMY_VAR__);
            stan::math::fill(rr,DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("mu", "nt", nt);
            validate_non_negative_index("mu", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > mu(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu,DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("A", "nt", nt);
            validate_non_negative_index("A", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  A(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt));
            (void) A;  // dummy to suppress unused var warning

            stan::math::initialize(A, DUMMY_VAR__);
            stan::math::fill(A,DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("B", "nt", nt);
            validate_non_negative_index("B", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  B(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt));
            (void) B;  // dummy to suppress unused var warning

            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B,DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("Ca", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Ca(static_cast<Eigen::VectorXd::Index>(nt));
            (void) Ca;  // dummy to suppress unused var warning

            stan::math::initialize(Ca, DUMMY_VAR__);
            stan::math::fill(Ca,DUMMY_VAR__);
            current_statement_begin__ = 53;
            validate_non_negative_index("Av", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Av(static_cast<Eigen::VectorXd::Index>(nt));
            (void) Av;  // dummy to suppress unused var warning

            stan::math::initialize(Av, DUMMY_VAR__);
            stan::math::fill(Av,DUMMY_VAR__);
            current_statement_begin__ = 54;
            validate_non_negative_index("Cb", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Cb(static_cast<Eigen::VectorXd::Index>(nt));
            (void) Cb;  // dummy to suppress unused var warning

            stan::math::initialize(Cb, DUMMY_VAR__);
            stan::math::fill(Cb,DUMMY_VAR__);
            current_statement_begin__ = 55;
            validate_non_negative_index("Bv", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Bv(static_cast<Eigen::VectorXd::Index>(nt));
            (void) Bv;  // dummy to suppress unused var warning

            stan::math::initialize(Bv, DUMMY_VAR__);
            stan::math::fill(Bv,DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("Ap", "nt", nt);
            validate_non_negative_index("Ap", "(nt - 1)", (nt - 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Ap(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>((nt - 1)));
            (void) Ap;  // dummy to suppress unused var warning

            stan::math::initialize(Ap, DUMMY_VAR__);
            stan::math::fill(Ap,DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("Bp", "nt", nt);
            validate_non_negative_index("Bp", "(nt - 1)", (nt - 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Bp(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>((nt - 1)));
            (void) Bp;  // dummy to suppress unused var warning

            stan::math::initialize(Bp, DUMMY_VAR__);
            stan::math::fill(Bp,DUMMY_VAR__);


            current_statement_begin__ = 58;
            stan::math::assign(Ap, append_row(append_col(Ap11,Ap1k),Ap_sub));
            current_statement_begin__ = 59;
            stan::math::assign(Bp, append_row(append_col(Bp11,Bp1k),Bp_sub));
            current_statement_begin__ = 60;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 61;
                stan::model::assign(Ca, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::sqrt((1 - dot_self(get_base1(Ap,i,"Ap",1)))), 
                            "assigning variable Ca");
                current_statement_begin__ = 62;
                stan::model::assign(Av, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (-(get_base1(Ca,i,"Ca",1)) + ((2 * get_base1(Ca,i,"Ca",1)) * inv_logit(get_base1(A_log,i,"A_log",1)))), 
                            "assigning variable Av");
                current_statement_begin__ = 63;
                stan::model::assign(Cb, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::sqrt((1 - dot_self(get_base1(Bp,i,"Bp",1)))), 
                            "assigning variable Cb");
                current_statement_begin__ = 64;
                stan::model::assign(Bv, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (-(get_base1(Cb,i,"Cb",1)) + ((2 * get_base1(Cb,i,"Cb",1)) * inv_logit(get_base1(B_log,i,"B_log",1)))), 
                            "assigning variable Bv");
            }
            current_statement_begin__ = 66;
            stan::math::assign(A, append_col(Ap,Av));
            current_statement_begin__ = 67;
            stan::math::assign(B, append_col(Bp,Bv));
            current_statement_begin__ = 69;
            stan::model::assign(H, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        sigma1, 
                        "assigning variable H");
            current_statement_begin__ = 70;
            stan::model::assign(L_H, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        cholesky_decompose(stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H")), 
                        "assigning variable L_H");
            current_statement_begin__ = 72;
            stan::model::assign(mu, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        subtract(add(add(phi0,multiply(phi,stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"))),subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),phi0)),multiply(theta,subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),phi0))), 
                        "assigning variable mu");
            current_statement_begin__ = 74;
            for (int t = 2; t <= T; ++t) {

                current_statement_begin__ = 75;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            stan::model::deep_copy(subtract(add(add(phi0,multiply(phi,stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"))),subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"))),multiply(theta,subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"))))), 
                            "assigning variable mu");
                current_statement_begin__ = 76;
                stan::model::assign(rr, 
                            stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            multiply(subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")),transpose(subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")))), 
                            "assigning variable rr");
                current_statement_begin__ = 78;
                stan::model::assign(H, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            stan::model::deep_copy(add(add(Cnst,multiply(multiply(transpose(A),stan::model::rvalue(rr, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rr")),A)),multiply(multiply(transpose(B),stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H")),B))), 
                            "assigning variable H");
                current_statement_begin__ = 79;
                stan::model::assign(L_H, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            cholesky_decompose(stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H")), 
                            "assigning variable L_H");
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < T; ++i0__) {
                for (int i1__ = 0; i1__ < nt; ++i1__) {
                    for (int i2__ = 0; i2__ < nt; ++i2__) {
                        if (stan::math::is_uninitialized(L_H[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: L_H" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < T; ++i0__) {
                for (int i1__ = 0; i1__ < nt; ++i1__) {
                    for (int i2__ = 0; i2__ < nt; ++i2__) {
                        if (stan::math::is_uninitialized(H[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: H" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < (T - 1); ++i0__) {
                for (int i1__ = 0; i1__ < nt; ++i1__) {
                    for (int i2__ = 0; i2__ < nt; ++i2__) {
                        if (stan::math::is_uninitialized(rr[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: rr" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < T; ++i0__) {
                for (int i1__ = 0; i1__ < nt; ++i1__) {
                    if (stan::math::is_uninitialized(mu[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mu" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                for (int i1__ = 0; i1__ < nt; ++i1__) {
                    if (stan::math::is_uninitialized(A(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: A" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                for (int i1__ = 0; i1__ < nt; ++i1__) {
                    if (stan::math::is_uninitialized(B(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: B" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                if (stan::math::is_uninitialized(Ca(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Ca" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                if (stan::math::is_uninitialized(Av(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Av" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                if (stan::math::is_uninitialized(Cb(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Cb" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                if (stan::math::is_uninitialized(Bv(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Bv" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                for (int i1__ = 0; i1__ < (nt - 1); ++i1__) {
                    if (stan::math::is_uninitialized(Ap(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Ap" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                for (int i1__ = 0; i1__ < (nt - 1); ++i1__) {
                    if (stan::math::is_uninitialized(Bp(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Bp" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 46;
            for (int k0__ = 0; k0__ < T; ++k0__) {
                stan::math::check_cholesky_factor(function__,"L_H[k0__]",L_H[k0__]);
            }
            current_statement_begin__ = 47;
            for (int k0__ = 0; k0__ < T; ++k0__) {
                stan::math::check_cov_matrix(function__,"H[k0__]",H[k0__]);
            }
            current_statement_begin__ = 48;
            current_statement_begin__ = 49;
            current_statement_begin__ = 50;
            current_statement_begin__ = 51;
            current_statement_begin__ = 52;
            current_statement_begin__ = 53;
            current_statement_begin__ = 54;
            current_statement_begin__ = 55;
            current_statement_begin__ = 56;
            current_statement_begin__ = 57;

            // model body

            current_statement_begin__ = 84;
            lp_accum__.add(normal_log<propto__>(to_vector(theta), 0, 1));
            current_statement_begin__ = 85;
            lp_accum__.add(normal_log<propto__>(to_vector(phi), 0, 1));
            current_statement_begin__ = 86;
            lp_accum__.add(normal_log<propto__>(to_vector(phi0), 0, 1));
            current_statement_begin__ = 87;
            lp_accum__.add(wishart_log<propto__>(Cnst, (nt + 1.0), diag_matrix(rep_vector(1.0,nt))));
            current_statement_begin__ = 88;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 89;
                lp_accum__.add((((uniform_log(get_base1(Av,k,"Av",1),-(get_base1(Ca,k,"Ca",1)),get_base1(Ca,k,"Ca",1)) + stan::math::log((2 * get_base1(Ca,k,"Ca",1)))) + log_inv_logit(get_base1(A_log,k,"A_log",1))) + log1m_inv_logit(get_base1(A_log,k,"A_log",1))));
                current_statement_begin__ = 90;
                lp_accum__.add((((uniform_log(get_base1(Bv,k,"Bv",1),-(get_base1(Cb,k,"Cb",1)),get_base1(Cb,k,"Cb",1)) + stan::math::log((2 * get_base1(Cb,k,"Cb",1)))) + log_inv_logit(get_base1(B_log,k,"B_log",1))) + log1m_inv_logit(get_base1(B_log,k,"B_log",1))));
            }
            current_statement_begin__ = 93;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 94;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"), stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"), stan::model::rvalue(L_H, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "L_H")));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("Cnst");
        names__.push_back("Ap11");
        names__.push_back("Ap1k");
        names__.push_back("Ap_sub");
        names__.push_back("Bp11");
        names__.push_back("Bp1k");
        names__.push_back("Bp_sub");
        names__.push_back("A_log");
        names__.push_back("B_log");
        names__.push_back("phi0");
        names__.push_back("phi");
        names__.push_back("theta");
        names__.push_back("L_H");
        names__.push_back("H");
        names__.push_back("rr");
        names__.push_back("mu");
        names__.push_back("A");
        names__.push_back("B");
        names__.push_back("Ca");
        names__.push_back("Av");
        names__.push_back("Cb");
        names__.push_back("Bv");
        names__.push_back("Ap");
        names__.push_back("Bp");
        names__.push_back("rts_out");
        names__.push_back("log_lik");
        names__.push_back("corC");
        names__.push_back("corH");
        names__.push_back("rts_p");
        names__.push_back("mu_p");
        names__.push_back("rr_p");
        names__.push_back("H_p");
        names__.push_back("L_H_p");
        names__.push_back("rev_p");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nt - 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nt - 1));
        dims__.push_back((nt - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nt - 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nt - 1));
        dims__.push_back((nt - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((T - 1));
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back((nt - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back((nt - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ahead);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ahead);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ahead);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ahead);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ahead);
        dims__.push_back(nt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_BEKKMGARCH_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        matrix_d Cnst = in__.cov_matrix_constrain(nt);
        double Ap11 = in__.scalar_lub_constrain(0,1);
        row_vector_d Ap1k = in__.row_vector_constrain((nt - 2));
        matrix_d Ap_sub = in__.matrix_constrain((nt - 1),(nt - 1));
        double Bp11 = in__.scalar_lub_constrain(0,1);
        row_vector_d Bp1k = in__.row_vector_constrain((nt - 2));
        matrix_d Bp_sub = in__.matrix_constrain((nt - 1),(nt - 1));
        vector_d A_log = in__.vector_constrain(nt);
        vector_d B_log = in__.vector_constrain(nt);
        vector_d phi0 = in__.vector_constrain(nt);
        matrix_d phi = in__.matrix_constrain(nt,nt);
        matrix_d theta = in__.matrix_constrain(nt,nt);
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(Cnst(k_0__, k_1__));
                }
            }
        vars__.push_back(Ap11);
            for (int k_0__ = 0; k_0__ < (nt - 2); ++k_0__) {
            vars__.push_back(Ap1k[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (nt - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (nt - 1); ++k_0__) {
                vars__.push_back(Ap_sub(k_0__, k_1__));
                }
            }
        vars__.push_back(Bp11);
            for (int k_0__ = 0; k_0__ < (nt - 2); ++k_0__) {
            vars__.push_back(Bp1k[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (nt - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (nt - 1); ++k_0__) {
                vars__.push_back(Bp_sub(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(A_log[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(B_log[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(phi0[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(phi(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(theta(k_0__, k_1__));
                }
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 46;
            validate_non_negative_index("L_H", "nt", nt);
            validate_non_negative_index("L_H", "nt", nt);
            validate_non_negative_index("L_H", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > L_H(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(L_H, DUMMY_VAR__);
            stan::math::fill(L_H,DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("H", "nt", nt);
            validate_non_negative_index("H", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > H(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(H, DUMMY_VAR__);
            stan::math::fill(H,DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("rr", "nt", nt);
            validate_non_negative_index("rr", "nt", nt);
            validate_non_negative_index("rr", "(T - 1)", (T - 1));
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > rr((T - 1), (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(rr, DUMMY_VAR__);
            stan::math::fill(rr,DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("mu", "nt", nt);
            validate_non_negative_index("mu", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > mu(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu,DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("A", "nt", nt);
            validate_non_negative_index("A", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  A(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt));
            (void) A;  // dummy to suppress unused var warning

            stan::math::initialize(A, DUMMY_VAR__);
            stan::math::fill(A,DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("B", "nt", nt);
            validate_non_negative_index("B", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  B(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt));
            (void) B;  // dummy to suppress unused var warning

            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B,DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("Ca", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Ca(static_cast<Eigen::VectorXd::Index>(nt));
            (void) Ca;  // dummy to suppress unused var warning

            stan::math::initialize(Ca, DUMMY_VAR__);
            stan::math::fill(Ca,DUMMY_VAR__);
            current_statement_begin__ = 53;
            validate_non_negative_index("Av", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Av(static_cast<Eigen::VectorXd::Index>(nt));
            (void) Av;  // dummy to suppress unused var warning

            stan::math::initialize(Av, DUMMY_VAR__);
            stan::math::fill(Av,DUMMY_VAR__);
            current_statement_begin__ = 54;
            validate_non_negative_index("Cb", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Cb(static_cast<Eigen::VectorXd::Index>(nt));
            (void) Cb;  // dummy to suppress unused var warning

            stan::math::initialize(Cb, DUMMY_VAR__);
            stan::math::fill(Cb,DUMMY_VAR__);
            current_statement_begin__ = 55;
            validate_non_negative_index("Bv", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Bv(static_cast<Eigen::VectorXd::Index>(nt));
            (void) Bv;  // dummy to suppress unused var warning

            stan::math::initialize(Bv, DUMMY_VAR__);
            stan::math::fill(Bv,DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("Ap", "nt", nt);
            validate_non_negative_index("Ap", "(nt - 1)", (nt - 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Ap(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>((nt - 1)));
            (void) Ap;  // dummy to suppress unused var warning

            stan::math::initialize(Ap, DUMMY_VAR__);
            stan::math::fill(Ap,DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("Bp", "nt", nt);
            validate_non_negative_index("Bp", "(nt - 1)", (nt - 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Bp(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>((nt - 1)));
            (void) Bp;  // dummy to suppress unused var warning

            stan::math::initialize(Bp, DUMMY_VAR__);
            stan::math::fill(Bp,DUMMY_VAR__);


            current_statement_begin__ = 58;
            stan::math::assign(Ap, append_row(append_col(Ap11,Ap1k),Ap_sub));
            current_statement_begin__ = 59;
            stan::math::assign(Bp, append_row(append_col(Bp11,Bp1k),Bp_sub));
            current_statement_begin__ = 60;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 61;
                stan::model::assign(Ca, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::sqrt((1 - dot_self(get_base1(Ap,i,"Ap",1)))), 
                            "assigning variable Ca");
                current_statement_begin__ = 62;
                stan::model::assign(Av, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (-(get_base1(Ca,i,"Ca",1)) + ((2 * get_base1(Ca,i,"Ca",1)) * inv_logit(get_base1(A_log,i,"A_log",1)))), 
                            "assigning variable Av");
                current_statement_begin__ = 63;
                stan::model::assign(Cb, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::sqrt((1 - dot_self(get_base1(Bp,i,"Bp",1)))), 
                            "assigning variable Cb");
                current_statement_begin__ = 64;
                stan::model::assign(Bv, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (-(get_base1(Cb,i,"Cb",1)) + ((2 * get_base1(Cb,i,"Cb",1)) * inv_logit(get_base1(B_log,i,"B_log",1)))), 
                            "assigning variable Bv");
            }
            current_statement_begin__ = 66;
            stan::math::assign(A, append_col(Ap,Av));
            current_statement_begin__ = 67;
            stan::math::assign(B, append_col(Bp,Bv));
            current_statement_begin__ = 69;
            stan::model::assign(H, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        sigma1, 
                        "assigning variable H");
            current_statement_begin__ = 70;
            stan::model::assign(L_H, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        cholesky_decompose(stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H")), 
                        "assigning variable L_H");
            current_statement_begin__ = 72;
            stan::model::assign(mu, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        subtract(add(add(phi0,multiply(phi,stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"))),subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),phi0)),multiply(theta,subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),phi0))), 
                        "assigning variable mu");
            current_statement_begin__ = 74;
            for (int t = 2; t <= T; ++t) {

                current_statement_begin__ = 75;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            stan::model::deep_copy(subtract(add(add(phi0,multiply(phi,stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"))),subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"))),multiply(theta,subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"))))), 
                            "assigning variable mu");
                current_statement_begin__ = 76;
                stan::model::assign(rr, 
                            stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            multiply(subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")),transpose(subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")))), 
                            "assigning variable rr");
                current_statement_begin__ = 78;
                stan::model::assign(H, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            stan::model::deep_copy(add(add(Cnst,multiply(multiply(transpose(A),stan::model::rvalue(rr, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rr")),A)),multiply(multiply(transpose(B),stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H")),B))), 
                            "assigning variable H");
                current_statement_begin__ = 79;
                stan::model::assign(L_H, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            cholesky_decompose(stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H")), 
                            "assigning variable L_H");
            }

            // validate transformed parameters
            current_statement_begin__ = 46;
            for (int k0__ = 0; k0__ < T; ++k0__) {
                stan::math::check_cholesky_factor(function__,"L_H[k0__]",L_H[k0__]);
            }
            current_statement_begin__ = 47;
            for (int k0__ = 0; k0__ < T; ++k0__) {
                stan::math::check_cov_matrix(function__,"H[k0__]",H[k0__]);
            }
            current_statement_begin__ = 48;
            current_statement_begin__ = 49;
            current_statement_begin__ = 50;
            current_statement_begin__ = 51;
            current_statement_begin__ = 52;
            current_statement_begin__ = 53;
            current_statement_begin__ = 54;
            current_statement_begin__ = 55;
            current_statement_begin__ = 56;
            current_statement_begin__ = 57;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_2__ = 0; k_2__ < nt; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(L_H[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < nt; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(H[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < nt; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < (T - 1); ++k_0__) {
                    vars__.push_back(rr[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(mu[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(A(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(B(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(Ca[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(Av[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(Cb[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(Bv[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (nt - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(Ap(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < (nt - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(Bp(k_0__, k_1__));
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 99;
            validate_non_negative_index("rts_out", "nt", nt);
            validate_non_negative_index("rts_out", "T", T);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  rts_out(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(T));
            (void) rts_out;  // dummy to suppress unused var warning

            stan::math::initialize(rts_out, DUMMY_VAR__);
            stan::math::fill(rts_out,DUMMY_VAR__);
            current_statement_begin__ = 100;
            validate_non_negative_index("log_lik", "T", T);
            vector<local_scalar_t__> log_lik(T);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik,DUMMY_VAR__);
            current_statement_begin__ = 101;
            validate_non_negative_index("corC", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  corC(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt));
            (void) corC;  // dummy to suppress unused var warning

            stan::math::initialize(corC, DUMMY_VAR__);
            stan::math::fill(corC,DUMMY_VAR__);
            current_statement_begin__ = 102;
            validate_non_negative_index("corH", "nt", nt);
            validate_non_negative_index("corH", "T", T);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > corH(T, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(corH, DUMMY_VAR__);
            stan::math::fill(corH,DUMMY_VAR__);
            current_statement_begin__ = 104;
            validate_non_negative_index("rts_p", "nt", nt);
            validate_non_negative_index("rts_p", "ahead", ahead);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > rts_p(ahead, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(rts_p, DUMMY_VAR__);
            stan::math::fill(rts_p,DUMMY_VAR__);
            current_statement_begin__ = 105;
            validate_non_negative_index("mu_p", "nt", nt);
            validate_non_negative_index("mu_p", "ahead", ahead);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > mu_p(ahead, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(mu_p, DUMMY_VAR__);
            stan::math::fill(mu_p,DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("rr_p", "nt", nt);
            validate_non_negative_index("rr_p", "nt", nt);
            validate_non_negative_index("rr_p", "ahead", ahead);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > rr_p(ahead, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(rr_p, DUMMY_VAR__);
            stan::math::fill(rr_p,DUMMY_VAR__);
            current_statement_begin__ = 107;
            validate_non_negative_index("H_p", "nt", nt);
            validate_non_negative_index("H_p", "ahead", ahead);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > H_p(ahead, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(H_p, DUMMY_VAR__);
            stan::math::fill(H_p,DUMMY_VAR__);
            current_statement_begin__ = 108;
            validate_non_negative_index("L_H_p", "nt", nt);
            validate_non_negative_index("L_H_p", "nt", nt);
            validate_non_negative_index("L_H_p", "ahead", ahead);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > L_H_p(ahead, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(L_H_p, DUMMY_VAR__);
            stan::math::fill(L_H_p,DUMMY_VAR__);
            current_statement_begin__ = 109;
            validate_non_negative_index("rev_p", "2", 2);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rev_p(static_cast<Eigen::VectorXd::Index>(2));
            (void) rev_p;  // dummy to suppress unused var warning

            stan::math::initialize(rev_p, DUMMY_VAR__);
            stan::math::fill(rev_p,DUMMY_VAR__);
            stan::math::assign(rev_p,transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(0).add(0).array())));


            current_statement_begin__ = 112;
            stan::math::assign(corC, cov2cor(Cnst, pstream__));
            current_statement_begin__ = 114;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 115;
                stan::model::assign(rts_out, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            multi_normal_rng(stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"),stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H"), base_rng__), 
                            "assigning variable rts_out");
                current_statement_begin__ = 116;
                stan::model::assign(corH, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            cov2cor(stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H"), pstream__), 
                            "assigning variable corH");
                current_statement_begin__ = 117;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            multi_normal_log(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"),stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H")), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 120;
            stan::model::assign(mu_p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        subtract(add(add(phi0,multiply(phi,stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"))),subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu"))),multiply(theta,subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")))), 
                        "assigning variable mu_p");
            current_statement_begin__ = 121;
            stan::model::assign(rr_p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        multiply(subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")),transpose(subtract(stan::model::rvalue(rts, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts"),stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")))), 
                        "assigning variable rr_p");
            current_statement_begin__ = 122;
            stan::model::assign(H_p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        add(add(Cnst,multiply(multiply(transpose(A),stan::model::rvalue(rr_p, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rr_p")),A)),multiply(multiply(transpose(B),stan::model::rvalue(H, stan::model::cons_list(stan::model::index_uni(T), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H")),B)), 
                        "assigning variable H_p");
            current_statement_begin__ = 123;
            stan::model::assign(L_H_p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        cholesky_decompose(stan::model::rvalue(H_p, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H_p")), 
                        "assigning variable L_H_p");
            current_statement_begin__ = 124;
            stan::model::assign(rts_p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        multi_normal_cholesky_rng(stan::model::rvalue(mu_p, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu_p"),stan::model::rvalue(L_H_p, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "L_H_p"), base_rng__), 
                        "assigning variable rts_p");
            current_statement_begin__ = 125;
            if (as_bool(logical_gte(ahead,2))) {

                current_statement_begin__ = 126;
                for (int p = 2; p <= ahead; ++p) {

                    current_statement_begin__ = 127;
                    stan::model::assign(rev_p, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                                get_base1(get_base1(rts_p,(p - 1),"rts_p",1),1,"rts_p",2), 
                                "assigning variable rev_p");
                    current_statement_begin__ = 128;
                    stan::model::assign(rev_p, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                get_base1(get_base1(rts_p,(p - 1),"rts_p",1),2,"rts_p",2), 
                                "assigning variable rev_p");
                    current_statement_begin__ = 129;
                    stan::model::assign(mu_p, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                stan::model::deep_copy(subtract(add(add(phi0,multiply(phi,stan::model::rvalue(rts_p, stan::model::cons_list(stan::model::index_uni((p - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts_p"))),subtract(stan::model::rvalue(rts_p, stan::model::cons_list(stan::model::index_uni((p - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts_p"),get_base1(mu_p,(p - 1),"mu_p",1))),multiply(theta,subtract(stan::model::rvalue(rts_p, stan::model::cons_list(stan::model::index_uni((p - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts_p"),get_base1(mu_p,(p - 1),"mu_p",1))))), 
                                "assigning variable mu_p");
                    current_statement_begin__ = 130;
                    stan::model::assign(rr_p, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                multiply(subtract(stan::model::rvalue(rts_p, stan::model::cons_list(stan::model::index_uni((p - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts_p"),stan::model::rvalue(mu_p, stan::model::cons_list(stan::model::index_uni((p - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu_p")),transpose(subtract(stan::model::rvalue(rts_p, stan::model::cons_list(stan::model::index_uni((p - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rts_p"),stan::model::rvalue(mu_p, stan::model::cons_list(stan::model::index_uni((p - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu_p")))), 
                                "assigning variable rr_p");
                    current_statement_begin__ = 131;
                    stan::model::assign(H_p, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                stan::model::deep_copy(add(add(Cnst,multiply(multiply(transpose(A),stan::model::rvalue(rr_p, stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rr_p")),A)),multiply(multiply(transpose(B),stan::model::rvalue(H_p, stan::model::cons_list(stan::model::index_uni((p - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H_p")),B))), 
                                "assigning variable H_p");
                    current_statement_begin__ = 132;
                    stan::model::assign(L_H_p, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                cholesky_decompose(stan::model::rvalue(H_p, stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "H_p")), 
                                "assigning variable L_H_p");
                    current_statement_begin__ = 133;
                    stan::model::assign(rts_p, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                multi_normal_cholesky_rng(stan::model::rvalue(mu_p, stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu_p"),stan::model::rvalue(L_H_p, stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "L_H_p"), base_rng__), 
                                "assigning variable rts_p");
                }
            }

            // validate generated quantities
            current_statement_begin__ = 99;
            current_statement_begin__ = 100;
            current_statement_begin__ = 101;
            stan::math::check_corr_matrix(function__,"corC",corC);
            current_statement_begin__ = 102;
            for (int k0__ = 0; k0__ < T; ++k0__) {
                stan::math::check_corr_matrix(function__,"corH[k0__]",corH[k0__]);
            }
            current_statement_begin__ = 104;
            current_statement_begin__ = 105;
            current_statement_begin__ = 106;
            current_statement_begin__ = 107;
            for (int k0__ = 0; k0__ < ahead; ++k0__) {
                stan::math::check_cov_matrix(function__,"H_p[k0__]",H_p[k0__]);
            }
            current_statement_begin__ = 108;
            for (int k0__ = 0; k0__ < ahead; ++k0__) {
                stan::math::check_cholesky_factor(function__,"L_H_p[k0__]",L_H_p[k0__]);
            }
            current_statement_begin__ = 109;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < T; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(rts_out(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(corC(k_0__, k_1__));
                }
            }
            for (int k_2__ = 0; k_2__ < nt; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(corH[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < ahead; ++k_0__) {
                vars__.push_back(rts_p[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < ahead; ++k_0__) {
                vars__.push_back(mu_p[k_0__][k_1__]);
                }
            }
            for (int k_2__ = 0; k_2__ < nt; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < ahead; ++k_0__) {
                    vars__.push_back(rr_p[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < nt; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < ahead; ++k_0__) {
                    vars__.push_back(H_p[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < nt; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < ahead; ++k_0__) {
                    vars__.push_back(L_H_p[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
            vars__.push_back(rev_p[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_BEKKMGARCH";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Cnst" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ap11";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= (nt - 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ap1k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (nt - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (nt - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Ap_sub" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "Bp11";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= (nt - 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Bp1k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (nt - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (nt - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Bp_sub" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A_log" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B_log" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_2__ = 1; k_2__ <= nt; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "L_H" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_2__ = 1; k_2__ <= nt; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "H" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_2__ = 1; k_2__ <= nt; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= (T - 1); ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "rr" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "A" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "B" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Ca" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Av" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Cb" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Bv" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= (nt - 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Ap" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= (nt - 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Bp" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rts_out" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corC" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= nt; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "corH" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rts_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= nt; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "rr_p" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= nt; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "H_p" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= nt; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L_H_p" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rev_p" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= (nt + ((nt * (nt - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Cnst" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ap11";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= (nt - 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ap1k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (nt - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (nt - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Ap_sub" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "Bp11";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= (nt - 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Bp1k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (nt - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (nt - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Bp_sub" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A_log" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B_log" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= (((nt * (nt + 1)) / 2) + ((nt - nt) * nt)); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L_H" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= (nt + ((nt * (nt - 1)) / 2)); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "H" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_2__ = 1; k_2__ <= nt; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= (T - 1); ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "rr" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "A" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "B" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Ca" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Av" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Cb" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Bv" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= (nt - 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Ap" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= (nt - 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Bp" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rts_out" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((nt * (nt - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corC" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= ((nt * (nt - 1)) / 2); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corH" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rts_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= nt; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "rr_p" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= (nt + ((nt * (nt - 1)) / 2)); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "H_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (((nt * (nt + 1)) / 2) + ((nt - nt) * nt)); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ahead; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_H_p" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rev_p" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_BEKKMGARCH_namespace::model_BEKKMGARCH stan_model;


#endif
